{{ $serverString := .ServerPackageString -}}
{{ $package := .Package -}}
{{ $packagePath := .PackagePath -}}
{{ $logicStruct := printf "%s%s" $package "Logic" -}}
package {{ $serverString }}
/* AUTOGENERATED USING grpcgen
 * Only edit if you know what you are doing!
 * For template changes/edits/bugs/new features, please contact marcus.low@grab.com
 */

import (
    "net"
    "fmt"
    "google.golang.org/grpc"
    "google.golang.org/grpc/grpclog"

    "{{ $packagePath }}"
)

type {{ $logicStruct }} struct {
}

func StartServer(port int) {
    // Set up listener
    lis, err := net.Listen("tcp", fmt.Sprintf(":%d", port))
    if err != nil {
        grpclog.Fatalf("Failed to listen: %v", err)
    }

    // // Do transport security (eg.TLS) here if required.
    //
	// var opts []grpc.ServerOption
	// if tls { // <- if TLS is required, this bool variable should be injected (one possibility is to add to StartServer() signature)
    // 		creds, err := credentials.NewServerTLSFromFile(certFile, keyFile)    // <- certFile and keyFile should also be injected
	//  	if err != nil {
    // 			grpclog.Fatalf("Failed to generate credentials %v", err)
    // 		}
    // 		opts = []grpc.ServerOption{grpc.Creds(creds)}
	// }

    // Initialise gRPC layer
    grpcServer := grpc.NewServer()

    // Hook protobuf-created interface to logic handler
    {{ $package }}.Register{{ $package | func_ToTitleCase }}Server(grpcServer, &{{ $logicStruct }}{})

    // Start service
    grpclog.Printf("Starting server on %s", lis.Addr())
    grpcServer.Serve(lis)
}